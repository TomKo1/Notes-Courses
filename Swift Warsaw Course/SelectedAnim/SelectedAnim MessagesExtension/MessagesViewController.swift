import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        for picture in picturesAll {
            let gr = UITapGestureRecognizer(target: self, action: #selector(click(gr:)))
            picture.isUserInteractionEnabled = true
            picture.addGestureRecognizer(gr)
        }
        
    }
    
    
    
    @IBOutlet var picturesAll: [UIImageView]!
    
    
    
    var toGlue = [UIImage]()
    
    @objc func click(gr: UITapGestureRecognizer){
        if let v = gr.view as? UIImageView {
            if let image = v.image {
                toGlue.append(image)
            }
        }
    }
    @IBAction func send(_ sender: Any) {
        if let size = toGlue.first?.size  {
            UIGraphicsBeginImageContext(size)
            
            for im in toGlue {
                im.draw(at: .zero)
            }
            
            let toSend = UIGraphicsGetCurrentContext()?.makeImage()
            
            let message = MSMessage()
            let layout = MSMessageTemplateLayout()
            layout.imageTitle = "Animal"
            layout.image = UIImage(cgImage: toSend!)
            
            message.layout = layout
            self.activeConversation?.insert(message, completionHandler: {
                e in
                
            })
        }
    }
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
