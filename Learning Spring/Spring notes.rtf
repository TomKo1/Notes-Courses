{\rtf1\ansi\ansicpg1250\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red153\green168\blue186;\red32\green32\blue32;\red173\green169\blue32;
\red109\green109\blue109;\red191\green100\blue38;\red254\green187\blue91;\red133\green96\blue154;\red88\green118\blue71;
}
{\*\expandedcolortbl;;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c67843\c66275\c12549;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c34510\c46275\c27843;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Notes took by me during doing course:\
		
\b\fs28 https://strefakursow.pl/kursy/programowanie/kurs_spring_framework_od_podstaw.html\
\

\b0 JPA -> zapisywanie i odczyt danych z bazy danych\
\
			SPRING BOOT\
Spring -> framework do tworzenia stron internetowych -> Dost\uc0\u281 pny r\'f3wnie\u380 \
Dla j\uc0\u281 zyk\'f3w pokrewnych -> Groovy, Kotlin (<3)\
\
- powsta\uc0\u322  jako alternatywna EJB (Enterprise Java Bean)\
\
- Spring Boot ->podzia\uc0\u322  modu\u322 \'f3w an paczki - \'82startery\'92 np. \'82spring-web-starter\'92 i \
Zarz\uc0\u261 dzanie wersjami ka\u380 dego z nich tak by nie dochodzi\u322 o do konfilkt\'f3w + autokonfiguracja + wbudowany serwer webowy (domy\u347 lnie Tomcat)\
\
\
Niezbedne narzedzia: \
	-> JDK jak zawsze\
	-> Maven \
\
// 			wygenerowanie projektu Spring Boot\
\
\
start.spring.io -> aplikacja webowa s\uc0\u322 u\u380 \u261 ca do wygenerowania aplikacji spring bootowych\
\
Group -> np. Firma\
Artefact -> nazwa projektu \
Dependencies -> zaleznosci np. Web (troche jak w Android Studio ? )\
\
//			przeglad plikow projektu\
\
.idea -> pliki polaczone z projektem w IDE InteliJ \
.mvn -> katalog gdzie .jar mavena i properties -> po to by w polaczeniu z mvnw mvnm.cmd kazy kto nie ma mavena mogl ten projekt odpalic\
\
src -> pliki zrodlowe jak i testowe\
\
.gitgnore -> git \
\
PrzykladowyProjekt.iml -> sklada caly projekt w calosc\
\
mvnm.cmd  i mvnw -> pliki skryptowe \
\
\
pom.xml -> plik zawierajacy konfiguracje Mavena -> WAZNE !!!\
\
		<groupId>\
		<version>\
		<packaging>\
		<name> -> nazwa projektu (generalnie dla ludzi)\
<properties> -> ustawienia projektu \
\
<dependencies> -> zaleznosci \
\
W src: 	\
		main -> logika\
			java -> pliki zrodlowe\
			resources -> application.properties -> propertiesy np. Adres bazy danych zwiazane z wewnetrznym dzialaniem (pom.xml jest og\'f3lnie dla Mavena)\
		test -> testy\
\
//				HELLO WORLD\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \cb3 CommandLineRunner\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 - interfejs CommandLineRunner (z metoda public void run(String\'85 args) throws Exception -> metoda ktora zostanie wywolana jak tylko Spring zakonczy swoja konfiguracje\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf2 \cb3 \

\f1 \cf4 @Component \cf5 // klasa jest SpringBeanem\
\cf6 public class \cf2 Hi \cf6 implements \cf2 CommandLineRunner \{\
\
    \cf4 @Override\
    \cf6 public void \cf7 run\cf2 (String ... args) \cf6 throws \cf2 Exception\{\
\
        System.
\f2\i \cf8 out
\f1\i0 \cf2 .println(\cf9 "Hello world!!!"\cf2 )\cf6 ;\
        \
    \cf2 \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \
/// 			fundamenty Spring Framework:\
\
	- Wstrzykiwanie zale\uc0\u380 no\u347 ci (Dependency Injection)\
	- Spring beans\
	- DI + Beans \
	- testowanie komponent\'f3w\
\
//		Wstrzykiwanie zale\uc0\u380 no\u347 ci (Dependency Injection) -> prostsze niz myslalem XD ;) \
\
Wstrzykiwanie to gdy w jakiejs klasie mamy pole reprezentujace jakis obiekt \
i do konstruktora takiej klasy przekazujemy obiekt odpowiedniego typu np. \
Quest quest = Quest(\'84Zabij smoka\'94) ; \
\
Knight knight1 = new Knight(\'84Tomek\'94, \'8420\'94, quest); // tutaj nastepuje wstrzykiwanie\
\
\
// sa w rodzaje wstrzykiwania: \
	-> przez konstruktor\
	-> przez metode ( najczesciej settera np. setQuest(Quest quest) -> moze byc problem z nullem \
\
Quest quest = Quest(\'84Zabij smoka\'94) ; \
\
Knight knight1 = new Knight(\'84Tomek\'94, \'8420\'94);\
knight1.setQuest(quest);\
\
\
//			Spring Beans, Kontekst, Kontener\
\
Spring Bean -> zwykle klasy Javy oznaczone odpowiedzni\uc0\u261  adnotacj\u261  (@Component) lub skonfigurowanie odpowiednio w XML \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf4 \cb3 @Component\
\cf6 public class \cf2 Castle \{\
\
    \cf6 private \cf2 String \cf8 name \cf2 = \cf9 "East Watch"\cf6 ;\
\
    public \cf7 Castle\cf2 ()\{\
\
    \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 // gdy spring bedzie startowal to doda taka klase do kontenera\
Kontener -> mapa klucz -> klasa  a wartosc -> instancja tej klasy\
Przy starcie jest tworzona nowa instancja klasy Castle (Beansa) i dodawana \
Do kontekstu -> jest w\'f3wczas gotowa do u\uc0\u380 ycia \
Czyli pod nazw\uc0\u261  \'84castle\'94 mamy instancje klasy Castle\
-> gdy aplikacja ko\uc0\u324 czy dzia\u322 anie aplikacja daje informacje kontenerowi zeby zniszczyl \
Beany i dopiero wtedy aplikacja konczy dzialanie \
\
-> kontener i \'84kilka uzytecznych funkcjonalnosci\'94 przechowywanych jest w Kontekscie -	> jest on przeszukiwany przez Springa pod kontem Beans\'f3w (@Component)\
\
-> metoda run ze Startera po zaladowaniu Beans\'f3w uzyskuje dost\uc0\u281 p do wszystkich klas implementuj\u261 cych interfejs CommandLineRunner i uruchamia ich metod\u281  run \
(String \'85 strings)\
\
//			cykla \uc0\u380 ycia Sptring Beans\
\
Mo\uc0\u380 emy zareagowa\u263  programistycznie na \'84utworzenie\'94 i \'84zniszczenie\'94 Beana \
\
- uzywamy do tego odpowiednich adnotacji: \
	\
	@PostConstruct\
	public void build()\{\
		System.out.println(\'84Wlasnie stworozono obiekt!\'94);\
	\}\
\
	@PreDestroy\
	public void tearDown()\{\
		System.out.println(\'84Wlasnie zniszcono obiekt!\'94);\
	\}\
\
//			wstrzykiwanie zale\uc0\u380 no\u347 ci + Spring Beans\
\
Z kontekstu springowego mozemy pobierac beany: \
\
\
Metoda run() \
\
Zwraca ConfihurableApplicationContext -> Mona go przypisac do referencji a nastepnie, wywolujac metode\
refCtx.getBean(\'84odpowiedniaNazwaBeana\'94); mozna uzyskac odpowiedniego Beana\
\
	
\f1\fs24 \cf6 \cb3 package \cf2 com.example.tomek.PrzykladowyProjekt\cf6 ;\
\
import \cf2 com.example.tomek.PrzykladowyProjekt.domain.Castle\cf6 ;\
import \cf2 org.springframework.boot.SpringApplication\cf6 ;\
import \cf2 org.springframework.boot.autoconfigure.\cf4 SpringBootApplication\cf6 ;\
import \cf2 org.springframework.context.ConfigurableApplicationContext\cf6 ;\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 @SpringBootApplication \cf5 // oznacza ze jest to glowna klasa startowa dla naszej\
// aplikacji\
\cf6 public class \cf2 PrzykladowyProjektApplication \{\
\
	\cf6 public static void \cf7 main\cf2 (String[] args) \{\
\
\
		ConfigurableApplicationContext ctx=SpringApplication.
\f2\i \cf2 \cb3 run
\f1\i0 \cf2 \cb3 (PrzykladowyProjektApplication.\cf6 class, \cf2 args)\cf6 ;\
\
		\cf2 Castle castle=(Castle)ctx.getBean(\cf9 "castle"\cf2 )\cf6 ;\
\
        \cf2 System.
\f2\i \cf8 out
\f1\i0 \cf2 .println(castle)\cf6 ;\
\
	\cf2 \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \
// ALE MAMY LEPSZE METODY:\
\
	ale mozna zrobic:\
	1. Zmienna referencyjna odpowiedniego typu (np. Castle) w danej klasie\
	we wnetrzu ktorej znajduje sie metododa run z ktorej chcielibysmy uzyskac dostep 	do odpowiedniego beana nalezy oznaczyc jak nizej:\
	\
	@Autowired // tylko dla klas oznaczonych adnotacja @Component -> Beansow !!! -> bo musi byc przeciez w Kontenerze !!! -> jak 2 benay tej samej klasy ale pod inna nazwa to tez blad !!!\
	Castle castle; // dzieki temu gdy spring buduje ta klase to odszuka nam castle i wstrzyknie -> mozemy go uzyc \
\
//				Wstrzykiwanie typ\'f3w prymitywnych\
\
Do wstrzykiwania typ\'f3w prymitywnych s\uc0\u322 u\u380 y adnotacja \
@Value(\'84jakasWartoscOdpowiedniegoTypu\'94)\
\
@Value(\'84Lancelot\'94)\
private String name;\
\
@Value(\'8429\'94) // mimo ze wpisujemy Stringa to pod spodem jest parsowanie do int\
private int age;\
\
 Ale takie wstrzykiwanie to rzadko\uc0\u347 \u263 \
private String name = \'84Lancelot\'94;\
\
private int age = 27;\
\
cz\uc0\u281 stszym zastosowaniem adnotacji @Value jest wstrzykiwanie zawarto\u347 ci, kt\'f3r\u261  podali\u347 my w application.properties\
\
application.properties -> przechowuje propertiesy aplikacji \
\
np. Mozemy stworzyc \
my.castle.name=East Watch\
\
// . . .. teraz w klasie np.  Castle \
@Value(\'84$(my.castle.name))\
private String name; // tutaj wstrzykujemy properties\'92a\
// podawanie wartosci domyslnej ( gdyby nie.bylo danego propertiesa): \
@Value(\'84$(my.castle.name:East Watch)\'94)\
private String name;\
\
jezeli chcemy stworzyc wlasny plik propertiesow (oczywiscie w katalogu resources) to \
Musimy dodac odpowiedni\uc0\u261  adnotacje @PropertySource(\'84classpath:NazwaPlikuZProperties\'94)\
\
//			Rodzaje wstrzykiwania zale\uc0\u380 no\u347 ci w Spring Framework\
\
@Authowired -> 3 typ wstrzykiwania przez reflection API \
\
Mozna np. Wstrzykiwac rowniez do metody: \
@Autowired 	// tutaj wstrzykujemy rycerza\
public Castle(Knight knight)\{ // konstruktor\
	this.knight = knight; 	// knight to pole odpowiedniego typu\
\}\
\
\
- zeby wstrzykiwac do metody wystarczy tez dopisac adnotacje @Autowired\
public void setQuest(Quest quest)\{ // quest jest wstrzykiwany  -> setQuest to metoda wstrzykujaca\
	this.quest = quest; // quest to odpowiednie pole klasy\
\}\
\
//			testowanie aplikacji \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
 }