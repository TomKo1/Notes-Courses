{\rtf1\ansi\ansicpg1250\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red153\green168\blue186;\red32\green32\blue32;\red173\green169\blue32;
\red109\green109\blue109;\red191\green100\blue38;\red254\green187\blue91;\red133\green96\blue154;\red88\green118\blue71;
\red173\green169\blue32;\red32\green32\blue32;\red191\green100\blue38;\red153\green168\blue186;\red133\green96\blue154;
\red88\green118\blue71;\red254\green187\blue91;}
{\*\expandedcolortbl;;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c67843\c66275\c12549;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c67843\c66275\c12549;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c52157\c37647\c60392;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c99608\c73333\c35686;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Notes took by me during doing course:\
		
\b\fs28 https://strefakursow.pl/kursy/programowanie/kurs_spring_framework_od_podstaw.html\
\

\b0 JPA -> zapisywanie i odczyt danych z bazy danych\
\
			SPRING BOOT\
Spring -> framework do tworzenia stron internetowych -> Dost\uc0\u281 pny r\'f3wnie\u380 \
Dla j\uc0\u281 zyk\'f3w pokrewnych -> Groovy, Kotlin (<3)\
\
- powsta\uc0\u322  jako alternatywna EJB (Enterprise Java Bean)\
\
- Spring Boot ->podzia\uc0\u322  modu\u322 \'f3w an paczki - \'82startery\'92 np. \'82spring-web-starter\'92 i \
Zarz\uc0\u261 dzanie wersjami ka\u380 dego z nich tak by nie dochodzi\u322 o do konfilkt\'f3w + autokonfiguracja + wbudowany serwer webowy (domy\u347 lnie Tomcat)\
\
\
Niezbedne narzedzia: \
	-> JDK jak zawsze\
	-> Maven \
\
// 			wygenerowanie projektu Spring Boot\
\
\
start.spring.io -> aplikacja webowa s\uc0\u322 u\u380 \u261 ca do wygenerowania aplikacji spring bootowych\
\
Group -> np. Firma\
Artefact -> nazwa projektu \
Dependencies -> zaleznosci np. Web (troche jak w Android Studio ? )\
\
//			przeglad plikow projektu\
\
.idea -> pliki polaczone z projektem w IDE InteliJ \
.mvn -> katalog gdzie .jar mavena i properties -> po to by w polaczeniu z mvnw mvnm.cmd kazy kto nie ma mavena mogl ten projekt odpalic\
\
src -> pliki zrodlowe jak i testowe\
\
.gitgnore -> git \
\
PrzykladowyProjekt.iml -> sklada caly projekt w calosc\
\
mvnm.cmd  i mvnw -> pliki skryptowe \
\
\
pom.xml -> plik zawierajacy konfiguracje Mavena -> WAZNE !!!\
\
		<groupId>\
		<version>\
		<packaging>\
		<name> -> nazwa projektu (generalnie dla ludzi)\
<properties> -> ustawienia projektu \
\
<dependencies> -> zaleznosci \
\
W src: 	\
		main -> logika\
			java -> pliki zrodlowe\
			resources -> application.properties -> propertiesy np. Adres bazy danych zwiazane z wewnetrznym dzialaniem (pom.xml jest og\'f3lnie dla Mavena)\
		test -> testy\
\
//				HELLO WORLD\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf2 \cb3 CommandLineRunner\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 - interfejs CommandLineRunner (z metoda public void run(String\'85 args) throws Exception -> metoda ktora zostanie wywolana jak tylko Spring zakonczy swoja konfiguracje\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf2 \cb3 \

\f1 \cf4 @Component \cf5 // klasa jest SpringBeanem\
\cf6 public class \cf2 Hi \cf6 implements \cf2 CommandLineRunner \{\
\
    \cf4 @Override\
    \cf6 public void \cf7 run\cf2 (String ... args) \cf6 throws \cf2 Exception\{\
\
        System.
\f2\i \cf8 out
\f1\i0 \cf2 .println(\cf9 "Hello world!!!"\cf2 )\cf6 ;\
        \
    \cf2 \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \
/// 			fundamenty Spring Framework:\
\
	- Wstrzykiwanie zale\uc0\u380 no\u347 ci (Dependency Injection)\
	- Spring beans\
	- DI + Beans \
	- testowanie komponent\'f3w\
\
//		Wstrzykiwanie zale\uc0\u380 no\u347 ci (Dependency Injection) -> prostsze niz myslalem XD ;) \
\
Wstrzykiwanie to gdy w jakiejs klasie mamy pole reprezentujace jakis obiekt \
i do konstruktora takiej klasy przekazujemy obiekt odpowiedniego typu np. \
Quest quest = Quest(\'84Zabij smoka\'94) ; \
\
Knight knight1 = new Knight(\'84Tomek\'94, \'8420\'94, quest); // tutaj nastepuje wstrzykiwanie\
\
\
// sa w rodzaje wstrzykiwania: \
	-> przez konstruktor\
	-> przez metode ( najczesciej settera np. setQuest(Quest quest) -> moze byc problem z nullem \
\
Quest quest = Quest(\'84Zabij smoka\'94) ; \
\
Knight knight1 = new Knight(\'84Tomek\'94, \'8420\'94);\
knight1.setQuest(quest);\
\
\
//			Spring Beans, Kontekst, Kontener\
\
Spring Bean -> zwykle klasy Javy oznaczone odpowiedzni\uc0\u261  adnotacj\u261  (@Component) lub skonfigurowanie odpowiednio w XML \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf10 \cb11 @Component\
\cf12 public class \cf13 Castle \{\
\
    \cf12 private \cf13 String \cf14 \cb11 name \cf13 \cb11 = \cf15 \cb11 "East Watch"\cf12 \cb11 ;\
\
    public \cf16 Castle\cf13 ()\{\
\
    \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 // gdy spring bedzie startowal to doda taka klase do kontenera\
Kontener -> mapa klucz -> klasa  a wartosc -> instancja tej klasy\
Przy starcie jest tworzona nowa instancja klasy Castle (Beansa) i dodawana \
Do kontekstu -> jest w\'f3wczas gotowa do u\uc0\u380 ycia \
Czyli pod nazw\uc0\u261  \'84castle\'94 mamy instancje klasy Castle\
-> gdy aplikacja ko\uc0\u324 czy dzia\u322 anie aplikacja daje informacje kontenerowi zeby zniszczyl \
Beany i dopiero wtedy aplikacja konczy dzialanie \
\
-> kontener i \'84kilka uzytecznych funkcjonalnosci\'94 przechowywanych jest w Kontekscie -	> jest on przeszukiwany przez Springa pod kontem Beans\'f3w (@Component)\
\
-> metoda run ze Startera po zaladowaniu Beans\'f3w uzyskuje dost\uc0\u281 p do wszystkich klas implementuj\u261 cych interfejs CommandLineRunner i uruchamia ich metod\u281  run \
(String \'85 strings)\
\
//			cykla \uc0\u380 ycia Sptring Beans\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
 }